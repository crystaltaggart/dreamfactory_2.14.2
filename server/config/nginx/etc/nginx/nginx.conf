##	This file is part of the DreamFactory Services Platform(tm)
##
##	DreamFactory Services Platform(tm) <http://github.com/dreamfactorysoftware/dreamfactory>
##	Copyright 2012-2014 DreamFactory Software, Inc. <support@dreamfactory.com>
##
##	Licensed under the Apache License, Version 2.0 (the "License");
##	you may not use this file except in compliance with the License.
##	You may obtain a copy of the License at
##
##	http://www.apache.org/licenses/LICENSE-2.0
##
##	Unless required by applicable law or agreed to in writing, software
##	distributed under the License is distributed on an "AS IS" BASIS,
##	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
##	See the License for the specific language governing permissions and
##	limitations under the License.

##**************************************************************************
## This is an crudely drawn example of the main nginx.conf file. It is the
## distribution version but has been trimmed of things not being used, or
## unhelpful comments.
##
## There is no need for you to use this file as your configuration. Just
## be sure that the conf.d/, site, and locations files are copied to the
## appropriate place in /etc/nginx (or wherever).
##
## Obviously feel free to change whatever you need to match your setup.
##
##**************************************************************************
##
## 		We would like to thank Stefanie Forrester for much of the tuning
## 		suggestions and comments below.
##
## 		Check out her blog at http://dak1n1.com/blog
##
##**************************************************************************

##**************************************************************************
## Global Settings
##**************************************************************************

##	YO! You can change "user" but you may (most likely) have permission
##		issues with your DSP. Avoid this by changing it before you log in
##		to your DSP for the first time.
user www-data;

# Where the process ID file lives.
pid /var/run/nginx.pid;

# only log critical errors
error_log /var/log/nginx/error.log crit;

##**************************************************************************
## Turn it up to ELEVEN!
##**************************************************************************

# This number should be, at maximum, the number of CPU cores on your system.
# (since nginx doesn't benefit from more than one worker per CPU.)
# Please adjust responsibly
worker_processes 4;

# Number of file descriptors used for Nginx. This is set in the OS with 'ulimit -n 200000'
# or using /etc/security/limits.conf
worker_rlimit_nofile 200000;

## Event configuration
events {
	# essential for linux, optmized to serve many clients with each thread
	use epoll;

	# Determines how many clients will be served by each worker process.
	# (Max clients = worker_connections * worker_processes)
	# "Max clients" is also limited by the number of socket connections available on the system (~64k)
	worker_connections 1000;

	# Accept as many connections as possible, after nginx gets notification about a new connection.
	# May flood worker_connections, if that option is set too low.
	multi_accept on;
}

##	Main http clause
http {
	# Caches information about open FDs, freqently accessed files.
	# Changing this setting, in my environment, brought performance up from 560k req/sec, to 904k req/sec.
	# I recommend using some varient of these options, though not the specific values listed below.
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;

	# Buffer log writes to speed up IO, or disable them altogether
	#access_log /var/log/nginx/access.log main buffer=16k;
	access_log off;

	# Sendfile copies data between one FD and other from within the kernel.
	# More efficient than read() + write(), since the requires transferring data to and from the user space.
	sendfile on;

	# Tcp_nopush causes nginx to attempt to send its HTTP response head in one packet,
	# instead of using partial frames. This is useful for prepending headers before calling sendfile,
	# or for throughput optimization.
	tcp_nopush on;

	# don't buffer data-sends (disable Nagle algorithm). Good for sending frequent small bursts of data in real time.
	tcp_nodelay on;

	# Timeout for keep-alive connections. Server will close connections after this time.
	keepalive_timeout 30;

	# Number of requests a client can make over the keep-alive connection. This is set high for testing.
	keepalive_requests 100000;

	# allow the server to close the connection after a client stops responding. Frees up socket-associated memory.
	reset_timedout_connection on;

	# send the client a "request timed out" if the body is not loaded by this time. Default 60.
	client_body_timeout 10;

	# If the client stops reading data, free up the stale client connection after this much time. Default 60.
	send_timeout 2;

	types_hash_max_size 2048;
	server_tokens off;

	# Compression. Reduces the amount of data that needs to be transferred over the network
	gzip on;
	gzip_min_length 10240;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml;
	gzip_disable "MSIE [1-6]\.";

	# Include the mime types
	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# Server configuration files
	include /etc/nginx/conf.d/*.conf;

	# Virtual Host Configs
	include /etc/nginx/sites-enabled/*;
}
